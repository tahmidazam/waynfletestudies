function [acc, net, incorrectPred, testingIncorrectPred] = trainNN( ...
    desiredChannels, ...
    dataset, ...
    maxEpochs, ... 
    miniBatchSize, ...
    numHiddenUnits, ...
    numClasses, ...
    includeDropoutLayer, ...
    dropoutLayerProbability, ...
    performNetworkValidation, ...
    validationPatience, ...
    initialLearnRate, ...
    usePiecewiseLearningRate, ...
    dropFactor, ...
    dropPeriod ...
    )

    inputSize = width(desiredChannels);
    
    % Determining network structure
    if includeDropoutLayer
        layers = [ ...
            sequenceInputLayer(inputSize)
            lstmLayer(numHiddenUnits,'OutputMode','last')
            dropoutLayer(dropoutLayerProbability)
            fullyConnectedLayer(numClasses)
            softmaxLayer
            classificationLayer];
    else
        layers = [ ...
                sequenceInputLayer(inputSize)
                lstmLayer(numHiddenUnits,'OutputMode','last')
                fullyConnectedLayer(numClasses)
                softmaxLayer
                classificationLayer];
    end

    % Determining network training options
    options = trainingOptions('adam', ...
        'ExecutionEnvironment','cpu', ...
        'GradientThreshold',1, ...
        'InitialLearnRate', initialLearnRate, ...
        'MaxEpochs',maxEpochs, ...
        'MiniBatchSize',miniBatchSize, ...
        'SequenceLength','longest', ...
        'Shuffle','every-epoch', ...
        'Verbose',0, ...
        'Plots','training-progress');
    
    if performNetworkValidation
        options.ValidationData = {
            dataset.testing.sequences, ...
            dataset.testing.responses};
        options.ValidationPatience = validationPatience;
        options.ValidationFrequency = round(maxEpochs / 10,0);
    end
    
    if usePiecewiseLearningRate
        options.LearnRateSchedule = 'piecewise';
        options.LearnRateDropFactor = dropFactor;
        options.LearnRateDropPeriod = dropPeriod;
    end
    
    % Training network

    net = trainNetwork( ...
        dataset.training.sequences, ...
        dataset.training.responses, ...
        layers,options ...
        );
    
    % Obtaining network accuracy

    predictions = classify(net,dataset.testing.sequences, ...
    'MiniBatchSize',miniBatchSize, ...
    'SequenceLength','longest');
    
    correctPred = sum(predictions == dataset.testing.responses);
    total = numel(dataset.testing.responses);

    incorrectPred = predictions ~= dataset.testing.responses;
    trainingPredictions = classify(net,dataset.training.sequences, ...
    'MiniBatchSize',miniBatchSize, ...
    'SequenceLength','longest');
    testingIncorrectPred = trainingPredictions ~= dataset.training.responses;

    acc = correctPred./total;
end
